// General classes structure
//

////////////////////////////////////////////////////////////////////////////
// Colors

$colorClass: ".color";
$colorKey: "black", "success", "error", "warning", "info", "white", "primary", "secondary", "default", "dark";

#{$colorClass} {

	@each $key in $colorKey {
		&-#{$key} {
			color: map-get($colors, $key);
		}
    }
}

$bgColorClass: ".bgColor";

#{$bgColorClass} {

	@each $key in $colorKey {
		&-#{$key} {
			background-color: map-get($colors, $key);
		}
    }
}

////////////////////////////////////////////////////////////////////////////
// height

$overflow: ".overflow";
$overflowKey: "auto", "hidden", "scroll";

#{$overflow} {

	@each $key in $overflowKey {
		&-#{$key} {
			overflow: map-get($overflows, $key);
		}
    }
}

////////////////////////////////////////////////////////////////////////////
// height

$height: ".height";
$heightKey: "auto", "inherit", "full";

#{$height} {

	@each $key in $heightKey {
		&-#{$key} {
			height: map-get($heights, $key);
		}
    }
}

////////////////////////////////////////////////////////////////////////////
// width

$width: ".width";
$widthKey: "auto", "inherit", "half", "full", "0", "1", "2", "3", "4", "5", "6";

#{$width} {

	@each $key in $widthKey {
		&-#{$key} {
			width: map-get($widths, $key);
		}
    }
}


////////////////////////////////////////////////////////////////////////////
// positions

$position: ".position";
$positionKey: "static", "absolute", "relative", "fixed";

#{$position} {

	@each $key in $positionKey {
		&-#{$key} {
			position: map-get($positions, $key);
		}
    }
}

////////////////////////////////////////////////////////////////////////////
// flexGrows

$flexGrow: ".flexGrow";
$flexGrowKey: 0, 1, 2, 3, 4, 5;

#{$flexGrow} {

	@each $key in $flexGrowKey {
		&-#{$key} {
			flex-grow: $key;
		}
    }
}

/// Mixin to manage button background color
/// @param {String} $property - property name
/// @param {String} $keys - property key
/// @param {String} $variables - variables property key
/// @require map-get
@mixin property-cicle($property, $keys, $variables) {
	.#{$property} {
		@each $key in $keys {
			&-#{$key} {
				#{$property}: map-get($variables, $key);
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////
// Paddings

$paddingKey: "auto", "0", "1", "2", "3", "4", "5", "6";

@include property-cicle( 'padding', $paddingKey, $gutter );

@include property-cicle( 'padding-bottom', $paddingKey, $gutter );

@include property-cicle( 'padding-top', $paddingKey, $gutter );

@include property-cicle( 'padding-left', $paddingKey, $gutter );

@include property-cicle( 'padding-right', $paddingKey, $gutter );

////////////////////////////////////////////////////////////////////////////
// Margins

$marginKey: "auto", "0", "1", "2", "3", "4", "5", "6";

@include property-cicle( 'margin', $marginKey, $gutter );

@include property-cicle( 'margin-bottom', $marginKey, $gutter );

@include property-cicle( 'margin-top', $marginKey, $gutter );

@include property-cicle( 'margin-left', $marginKey, $gutter );

@include property-cicle( 'margin-right', $marginKey, $gutter );


////////////////////////////////////////////////////////////////////////////
// Bottoms

$bottomKey: "auto", "0", "1", "2", "3", "4", "5", "6";

@include property-cicle( 'bottom', $bottomKey, $gutter );


////////////////////////////////////////////////////////////////////////////
// Tops

$topKey: "auto", "0", "1", "2", "3", "4", "5", "6";

@include property-cicle( 'top', $topKey, $gutter );


////////////////////////////////////////////////////////////////////////////
// Lefts

$leftKey: "auto", "0", "1", "2", "3", "4", "5", "6";

@include property-cicle( 'left', $leftKey, $gutter );


////////////////////////////////////////////////////////////////////////////
// Rigts

$rightKey: "auto", "0", "1", "2", "3", "4", "5", "6";

@include property-cicle( 'right', $rightKey, $gutter );


////////////////////////////////////////////////////////////////////////////
// Buttons

@function hover-clr($color) {
	@if (lightness($color) > 50) {
		@return darken($color, 12%);
	} @else {
		@return lighten($color, 12%);
	}
}

@function active-clr($color) {
	@if (lightness($color) > 50) {
		@return darken($color, 16%);
	} @else {
		@return lighten($color, 16%);
	}
}

@function text-clr($key) {
	@if ($key == "primary") {
		@return $color-gray14;
	} @if ($key == "secondary") {
		@return $color-gray18;
	} @else {
		@return $color-white;
	}
}

/// Mixin to manage button background color
/// @param {String} $bg - background color name
/// @param {String} $key - key color
/// @require hover-clr
/// @require active-clr
@mixin button-bg($bg, $key) {
	color: text-clr($key);
	background: $bg;
	&:hover {
	  background: hover-clr($bg);
	  transition: all 0.3s ease;
	  cursor: pointer;
	}
	&:active {
	  background: active-clr($bg);
	}
}

$button: ".btn";
$buttonTextKey: "1", "2", "3";
$buttonKey: "success", "error", "warning", "info", "white", "black", "primary", "secondary";

#{$button} {

	@each $key in $buttonTextKey {
		&-#{$key} {
			color: $color-white;
			text-decoration: none;
			letter-spacing: map-get($gutter, $key)/32;
			padding: map-get($gutter, $key)/2 map-get($gutter, $key);
			border-radius: map-get($gutter, $key)/2;
			font-size: map-get($gutter, $key);
			font-weight: 400;
			font-stretch: normal;
			font-family: Arial;
			line-height: normal;
			appearance: auto;
			border: none;
		}
    }

	@each $key in $buttonKey {
		&-#{$key} {
			@include button-bg( map-get($colors, $key), $key );
		}
    }
}


/// Mixin to manage responsive breakpoints
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
	// If the key exists in the map
	@if map-has-key($breakpoints, $breakpoint) {
	  // Prints a media query based on the value
	  @media (max-width: map-get($breakpoints, $breakpoint)) {
		@content;
	  }
	}
	// If the key doesn't exist in the map
	@else {
	  @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
		  + "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}
